// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  BUYER
  SELLER
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  CompletedPayment
  CancelledPayment
  WaitingPayment
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  password    String
  name        String
  type        UserType  @default(BUYER)
  point       Int       @default(0)
  grade       Grade?    @relation(fields: [gradeId], references: [id])
  gradeId     String?
  image       String?
  totalAmount Decimal   @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  orders         Order[]
  cart           Cart?
  reviews        Review[]
  inquiries      Inquiry[]
  favoriteStores FavoriteStore[]
  alarms         Alarm[]
  replies        Reply[]
  storeId        String?
  Store          Store?
}

model Grade {
  id        String  @id @default(cuid())
  name      String
  pointRate Int
  minAmount Decimal
  users     User[]
}

model Store {
  id          String    @id @default(cuid())
  name        String
  address     String
  phoneNumber String
  content     String
  userId      String    @unique
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  products Product[]
  likedBy  FavoriteStore[]
  user     User            @relation(fields: [userId], references: [id])
}

model Product {
  id                String    @id @default(cuid())
  name              String
  price             Decimal
  image             String
  content           String
  categoryId        String
  storeId           String
  discountRate      Int?
  discountPrice     Decimal?
  discountStartTime DateTime?
  discountEndTime   DateTime?
  sales             Int       @default(0)
  reviewsCount      Int?
  reviewsRating     Float?
  isSoldOut         Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  store      Store       @relation(fields: [storeId], references: [id])
  category   Category    @relation(fields: [categoryId], references: [id])
  stocks     Stock[]
  orderItems OrderItem[]
  cartItems  CartItem[]
  reviews    Review[]
  inquiries  Inquiry[]
}

model Stock {
  id        String @id @default(cuid())
  productId String
  sizeId    String
  quantity  Int

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  size    Size    @relation(fields: [sizeId], references: [id])
}

model Size {
  id   String @id @default(cuid())
  size String

  stocks     Stock[]
  cartItems  CartItem[]
  orderItems OrderItem[]
}

model Category {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  products Product[]
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  name      String
  address   String
  phone     String
  status    OrderStatus
  usePoint  Int
  subtotal  Decimal
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  paidAt    DateTime?

  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  payment    Payment?
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  sizeId    String
  quantity  Int
  price     Decimal // 이거 어차피 product의 price 라서 있어야하나.. 싶어요
  reviewId  String?

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  size    Size    @relation(fields: [sizeId], references: [id])

  Review Review?
}

model Payment {
  id         String        @id @default(cuid())
  orderId    String        @unique
  status     PaymentStatus
  totalPrice Decimal
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Cart {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  sizeId    String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  size    Size    @relation(fields: [sizeId], references: [id])
}

model Inquiry {
  id        String        @id @default(cuid())
  productId String
  userId    String
  title     String
  content   String
  isSecret  Boolean
  status    InquiryStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  Reply   Reply?
}

enum InquiryStatus {
  completedAnswer
  noAnswer
}

model Reply {
  id        String   @id @default(cuid())
  inquiryId String   @unique
  userId    String
  content   String
  isChecked Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inquiry Inquiry @relation(fields: [inquiryId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])
}

model Review {
  id          String   @id @default(cuid())
  productId   String
  orderItemId String   @unique
  userId      String
  content     String
  rating      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id])
  orderItem OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
}

model FavoriteStore {
  userId    String
  storeId   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@id([userId, storeId])
}

model Alarm {
  id        String   @id @default(cuid())
  userId    String
  content   String
  isChecked Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}
